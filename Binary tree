class Node:
    def __init__(self, val = None):
        self.parent = None
        self.left = None
        self.right = None
        self.val = val
    def add(self,val):
        if self.val>val:
            if self.left:
                self.left.add(val)
            else:
                tmp = Node(val)
                self.left = tmp
                tmp.parent = self
                print("new node added, value {0}, parent value {1}".format(tmp.val,self.val))
        else:
            if self.right:
                self.right.add(val)
            else:
                tmp = Node(val)
                self.right = tmp
                tmp.parent = self
                print("new node added, value {0}, parent value {1}".format(tmp.val, self.val))
    def find(self,val):
        if val == self.val:
            print("found it, its parent is {}".format(self.parent.val))
        elif val>self.val:
            if self.right:
                self.right.find(val)
            else:
                print("sorry, find nothing")
        elif val<self.val:
            if self.left:
                self.left.find(val)
            else:
                print("sorry, find nothing")
    def remove(self,val):
        if self.val == val:
            if (self.left or self.right) is None:
                if self.parent:
                    if self.val>self.parent.val:
                        self.parent.right = None
                    else:
                        self.parent.left = None
            elif ((self.left and self.right) is None) and ((self.left or self.right) is not None):
                if self.parent:
                    if self.right:
                        if self.val>self.parent.val:
                            self.parent.right = self.right
                            self.right.parent = self.parent
                        else:
                            self.parent.left = self.right
                            self.right.parent = self.parent
                    if self.left:
                        if self.val<self.parent.val:
                            self.parent.left = self.left
                            self.left.parent = self.parent
                        else:
                            self.parent.right = self.left
                            self.left.parent = self.parent
                else:
                    if self.right:
                        self.right.parent = None
                    else:
                        self.left.parent = None
            else:
                tmp = self.right
                while tmp.left:
                    tmp = tmp.left
                print (tmp.val)
                #узнаем с какой стороны стоит селф
                self.val = tmp.val
                if tmp.right:
                    tmp.parent.left = tmp.right
                else:
                    tmp.parent.left = None
        elif self.val>val:
            self.left.remove(val)
        elif self.val<val:
            self.right.remove(val)
